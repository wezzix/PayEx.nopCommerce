//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SD.Payex2.Services.PxAgreement
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://external.payex.com/PxAgreement/", ConfigurationName="SD.Payex2.Services.PxAgreement.PxAgreementSoap")]
    internal interface PxAgreementSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/AutoPay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AutoPayAsync(long accountNumber, string agreementRef, int price, string productNumber, string description, string orderId, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/AutoPay2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AutoPay2Async(long accountNumber, string agreementRef, int price, string productNumber, string description, string orderId, string purchaseOperation, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/AutoPay3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AutoPay3Async(long accountNumber, string agreementRef, int price, string productNumber, string description, string orderId, string purchaseOperation, string currency, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/CreateAgreement", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateAgreementAsync(long accountNumber, int clientType, string clientRef, string merchantRef, string description, long paymentMethod, int maxAmount, string notifyUrl, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/CreateAgreement2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateAgreement2Async(long accountNumber, int clientType, string clientRef, string merchantRef, string description, long paymentMethod, int maxAmount, string notifyUrl, string startDate, string stopDate, int maxLimitPeriod, int maxPeriod, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/CreateAgreement3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreateAgreement3Async(long accountNumber, string merchantRef, string description, string purchaseOperation, int maxAmount, string notifyUrl, string startDate, string stopDate, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/DeleteAgreement", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DeleteAgreementAsync(long accountNumber, string agreementRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/ActivatePxAgreement", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ActivatePxAgreementAsync(long accountNumber, int clientType, string clientRef, string password, string agreementRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/Check", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckAsync(long accountNumber, string agreementRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxAgreement/AutoPayCpa", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AutoPayCpaAsync(long accountNumber, string agreementRef, int price, string productNumber, string description, string orderId, string purchaseOperation, string currency, string hash);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    internal interface PxAgreementSoapChannel : SD.Payex2.Services.PxAgreement.PxAgreementSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    internal partial class PxAgreementSoapClient : System.ServiceModel.ClientBase<SD.Payex2.Services.PxAgreement.PxAgreementSoap>, SD.Payex2.Services.PxAgreement.PxAgreementSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PxAgreementSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(PxAgreementSoapClient.GetBindingForEndpoint(endpointConfiguration), PxAgreementSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PxAgreementSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PxAgreementSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PxAgreementSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PxAgreementSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PxAgreementSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> AutoPayAsync(long accountNumber, string agreementRef, int price, string productNumber, string description, string orderId, string hash)
        {
            return base.Channel.AutoPayAsync(accountNumber, agreementRef, price, productNumber, description, orderId, hash);
        }
        
        public System.Threading.Tasks.Task<string> AutoPay2Async(long accountNumber, string agreementRef, int price, string productNumber, string description, string orderId, string purchaseOperation, string hash)
        {
            return base.Channel.AutoPay2Async(accountNumber, agreementRef, price, productNumber, description, orderId, purchaseOperation, hash);
        }
        
        public System.Threading.Tasks.Task<string> AutoPay3Async(long accountNumber, string agreementRef, int price, string productNumber, string description, string orderId, string purchaseOperation, string currency, string hash)
        {
            return base.Channel.AutoPay3Async(accountNumber, agreementRef, price, productNumber, description, orderId, purchaseOperation, currency, hash);
        }
        
        public System.Threading.Tasks.Task<string> CreateAgreementAsync(long accountNumber, int clientType, string clientRef, string merchantRef, string description, long paymentMethod, int maxAmount, string notifyUrl, string hash)
        {
            return base.Channel.CreateAgreementAsync(accountNumber, clientType, clientRef, merchantRef, description, paymentMethod, maxAmount, notifyUrl, hash);
        }
        
        public System.Threading.Tasks.Task<string> CreateAgreement2Async(long accountNumber, int clientType, string clientRef, string merchantRef, string description, long paymentMethod, int maxAmount, string notifyUrl, string startDate, string stopDate, int maxLimitPeriod, int maxPeriod, string hash)
        {
            return base.Channel.CreateAgreement2Async(accountNumber, clientType, clientRef, merchantRef, description, paymentMethod, maxAmount, notifyUrl, startDate, stopDate, maxLimitPeriod, maxPeriod, hash);
        }
        
        public System.Threading.Tasks.Task<string> CreateAgreement3Async(long accountNumber, string merchantRef, string description, string purchaseOperation, int maxAmount, string notifyUrl, string startDate, string stopDate, string hash)
        {
            return base.Channel.CreateAgreement3Async(accountNumber, merchantRef, description, purchaseOperation, maxAmount, notifyUrl, startDate, stopDate, hash);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAgreementAsync(long accountNumber, string agreementRef, string hash)
        {
            return base.Channel.DeleteAgreementAsync(accountNumber, agreementRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> ActivatePxAgreementAsync(long accountNumber, int clientType, string clientRef, string password, string agreementRef, string hash)
        {
            return base.Channel.ActivatePxAgreementAsync(accountNumber, clientType, clientRef, password, agreementRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> CheckAsync(long accountNumber, string agreementRef, string hash)
        {
            return base.Channel.CheckAsync(accountNumber, agreementRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> AutoPayCpaAsync(long accountNumber, string agreementRef, int price, string productNumber, string description, string orderId, string purchaseOperation, string currency, string hash)
        {
            return base.Channel.AutoPayCpaAsync(accountNumber, agreementRef, price, productNumber, description, orderId, purchaseOperation, currency, hash);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.PxAgreementSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.PxAgreementSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.PxAgreementSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://external.payex.com/pxagreement/pxagreement.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.PxAgreementSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://external.payex.com/pxagreement/pxagreement.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            PxAgreementSoap,
            
            PxAgreementSoap12,
        }
    }
}
