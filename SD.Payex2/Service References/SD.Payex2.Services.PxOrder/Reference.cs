//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SD.Payex2.Services.PxOrder
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://external.payex.com/PxOrder/", ConfigurationName="SD.Payex2.Services.PxOrder.PxOrderSoap")]
    internal interface PxOrderSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Initialize8", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Initialize8Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    long price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string additionalValues, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Initialize3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Initialize3Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    string orderType, 
                    int period, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Initialize4", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Initialize4Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Initialize5", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Initialize5Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Initialize6", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Initialize6Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Initialize7", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Initialize7Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string additionalValues, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Initialize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InitializeAsync(
                    long accountNumber, 
                    string orderType, 
                    string purchaseOperation, 
                    int autoRenew, 
                    string view, 
                    int period, 
                    string orderID, 
                    string productNumber, 
                    string subscriptionNumber, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string description, 
                    string returnURL, 
                    int checkPeriod, 
                    string externalID, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/InitializeBasic", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InitializeBasicAsync(long accountNumber, string purchaseOperation, string orderID, string productNumber, string priceArgList, string description, string returnURL, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Complete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CompleteAsync(long accountNumber, string orderRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/CheckTransaction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckTransactionAsync(long accountNumber, string OrderId, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Check2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Check2Async(long accountNumber, int transactionNumber, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Check", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckAsync(long accountNumber, string transactionRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/SalePX", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SalePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AuthorizePX", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AuthorizePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchasePX", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchasePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseActivate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseActivateAsync(long accountNumber, int transactionNumber, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseOTT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseOTTAsync(long accountNumber, string orderRef, int identifierType, string identifierRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseWyWallet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseWyWalletAsync(long accountNumber, string orderRef, string msisdn, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PreparePurchaseWyWallet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PreparePurchaseWyWalletAsync(long accountNumber, string orderRef, string returnUrl, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PreparePurchaseSwish", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PreparePurchaseSwishAsync(long accountNumber, string orderRef, string msisdn, string ipAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AuthenticateCpa", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AuthenticateCpaAsync(long accountNumber, int authenticationType, string msisdn, string clientIPAddress, string moCode, string returnUrl, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/SaleCPA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaleCPAAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseCpa", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseCpaAsync(long accountNumber, string orderRef, string msisdn, string verificationCode, string serviceCategory, string message, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/ReserveIVR", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ReserveIVRAsync(long accountNumber, string orderRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/SaleIVR", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaleIVRAsync(long accountNumber, string orderRef, int userType, string userRef, string ivrCode, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Cancel2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Cancel2Async(long accountNumber, int transactionNumber, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Cancel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CancelAsync(long accountNumber, string transactionRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Credit2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Credit2Async(long accountNumber, int transactionNumber, int amount, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Credit3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Credit3Async(long accountNumber, int transactionNumber, int amount, string orderId, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Credit4", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Credit4Async(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Credit5", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Credit5Async(long accountNumber, int transactionNumber, long amount, string orderId, int vatAmount, string additionalValues, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Credit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreditAsync(long accountNumber, string transactionRef, int amount, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/CreditOrderLine2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreditOrderLine2Async(long accountNumber, int transactionNumber, string itemNumber, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/CreditOrderLine3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreditOrderLine3Async(long accountNumber, int transactionNumber, string itemNumber, string orderId, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/CreditOrderLine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreditOrderLineAsync(long accountNumber, string transactionRef, string itemNumber, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Capture", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CaptureAsync(long accountNumber, string transactionRef, int amount, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Capture2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Capture2Async(long accountNumber, int transactionNumber, int amount, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Capture3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Capture3Async(long accountNumber, int transactionNumber, int amount, string orderId, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Capture4", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Capture4Async(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/Capture5", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> Capture5Async(long accountNumber, int transactionNumber, long amount, string orderId, int vatAmount, string additionalValues, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/SaleEVC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaleEVCAsync(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AuthorizeEVC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AuthorizeEVCAsync(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AddSingleOrderLine", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AddSingleOrderLineAsync(long accountNumber, string orderRef, string itemNumber, string itemDescription1, string itemDescription2, string itemDescription3, string itemDescription4, string itemDescription5, int quantity, int amount, int vatPrice, int vatPercent, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AddSingleOrderLine2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AddSingleOrderLine2Async(long accountNumber, string orderRef, string itemNumber, string itemDescription1, string itemDescription2, string itemDescription3, string itemDescription4, string itemDescription5, int quantity, long amount, int vatPrice, int vatPercent, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AddMultipleOrderLines", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<SD.Payex2.Services.PxOrder.AddMultipleOrderLinesResponse> AddMultipleOrderLinesAsync(SD.Payex2.Services.PxOrder.AddMultipleOrderLinesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PrepareSaleDD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PrepareSaleDDAsync(long accountNumber, string orderRef, int userType, string userRef, string bankName, string clientIPAddress, string clientIdentifier, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PrepareSaleDD2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PrepareSaleDD2Async(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PrepareAuthorizeDD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PrepareAuthorizeDDAsync(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/SaleInvoice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaleInvoiceAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/SaleInvoice2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaleInvoice2Async(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/SaleInvoiceLedger", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaleInvoiceLedgerAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AddOrderAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AddOrderAddressAsync(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AddOrderAddress2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AddOrderAddress2Async(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingCountryCode, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryCountryCode, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AuthorizeGC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AuthorizeGCAsync(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/SaleGC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SaleGCAsync(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/GetTransactionDetails2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetTransactionDetails2Async(long accountNumber, int transactionNumber, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/GetTransactionDetails", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetTransactionDetailsAsync(long accountNumber, string transactionRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/TransactionCheck2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> TransactionCheck2Async(long accountNumber, int transactionNumber, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AuthorizeInvoice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AuthorizeInvoiceAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AuthorizeInvoiceLedger", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AuthorizeInvoiceLedgerAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseInvoicePrivate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseInvoicePrivateAsync(
                    long accountNumber, 
                    string orderRef, 
                    string customerRef, 
                    string customerName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string socialSecurityNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseInvoiceCorporate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseInvoiceCorporateAsync(
                    long accountNumber, 
                    string orderRef, 
                    string companyRef, 
                    string companyName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string organizationNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseInvoiceSale", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseInvoiceSaleAsync(long accountNumber, string orderRef, string socialSecurityNumber, string legalFirstName, string legalLastName, string legalStreetAddress, string legalCoAddress, string legalPostNumber, string legalCity, string legalCountryCode, string email, string msisdn, string ipAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchasePartPaymentSale", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchasePartPaymentSaleAsync(long accountNumber, string orderRef, string socialSecurityNumber, string legalFirstName, string legalLastName, string legalStreetAddress, string legalCoAddress, string legalPostNumber, string legalCity, string legalCountryCode, string email, string msisdn, string ipAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PreparePartPaymentSale", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PreparePartPaymentSaleAsync(long accountNumber, string orderRef, string category, string socialSecurityNumber, string countryCode, string email, string msisdn, string ipAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/GetAddressByPaymentMethod", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetAddressByPaymentMethodAsync(long accountNumber, string paymentMethod, string ssn, string zipcode, string countryCode, string ipAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/InvoiceLinkGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> InvoiceLinkGetAsync(long accountNumber, int transactionNumber, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/GetLowestMonthlyPartPaymentAmount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetLowestMonthlyPartPaymentAmountAsync(long accountNumber, long amount, string currency, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseFinancing", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseFinancingAsync(long accountNumber, string orderRef, string accountId, string socialSecurityNumber, string countryCode, string contractType, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/GetApprovedDeliveryAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetApprovedDeliveryAddressAsync(long accountNumber, string orderRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/FinalizeTransaction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> FinalizeTransactionAsync(long accountNumber, string orderRef, long amount, long vatAmount, string clientIPAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseFinancingInvoice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseFinancingInvoiceAsync(long accountNumber, string orderRef, string socialSecurityNumber, string legalName, string streetAddress, string coAddress, string zipCode, string city, string countryCode, string paymentMethod, string email, string msisdn, string ipAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchaseCreditAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchaseCreditAccountAsync(long accountNumber, string orderRef, string socialSecurityNumber, string legalName, string streetAddress, string coAddress, string zipCode, string city, string countryCode, string paymentMethod, string email, string msisdn, string ipAddress, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PreparePurchasePremiumSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PreparePurchasePremiumSmsAsync(long accountNumber, string orderRef, string msisdn, string message, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/AccomplishPremiumSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> AccomplishPremiumSmsAsync(long accountNumber, string orderRef, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/PurchasePremiumSms", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> PurchasePremiumSmsAsync(long accountNumber, string orderRef, string msisdn, string message, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/CheckMsisdn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckMsisdnAsync(long accountNumber, string msisdn, int amount, string vasAgreementId, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/SendSmsCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendSmsCodeAsync(long accountNumber, string sender, string msIsdn, string customData, string vasAgreementId, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://external.payex.com/PxOrder/VerifySmsCodeStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> VerifySmsCodeStatusAsync(long accountNumber, string orderRef, string smsCode, string hash);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddMultipleOrderLines", WrapperNamespace="http://external.payex.com/PxOrder/", IsWrapped=true)]
    internal partial class AddMultipleOrderLinesRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://external.payex.com/PxOrder/", Order=0)]
        public long accountNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://external.payex.com/PxOrder/", Order=1)]
        public string orderRef;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://external.payex.com/PxOrder/", Order=2)]
        public int numberOfItems;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://external.payex.com/PxOrder/", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")]
        [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)]
        public string[][] orderDetails;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://external.payex.com/PxOrder/", Order=4)]
        public string hash;
        
        public AddMultipleOrderLinesRequest()
        {
        }
        
        public AddMultipleOrderLinesRequest(long accountNumber, string orderRef, int numberOfItems, string[][] orderDetails, string hash)
        {
            this.accountNumber = accountNumber;
            this.orderRef = orderRef;
            this.numberOfItems = numberOfItems;
            this.orderDetails = orderDetails;
            this.hash = hash;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddMultipleOrderLinesResponse", WrapperNamespace="http://external.payex.com/PxOrder/", IsWrapped=true)]
    internal partial class AddMultipleOrderLinesResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://external.payex.com/PxOrder/", Order=0)]
        public string AddMultipleOrderLinesResult;
        
        public AddMultipleOrderLinesResponse()
        {
        }
        
        public AddMultipleOrderLinesResponse(string AddMultipleOrderLinesResult)
        {
            this.AddMultipleOrderLinesResult = AddMultipleOrderLinesResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    internal interface PxOrderSoapChannel : SD.Payex2.Services.PxOrder.PxOrderSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    internal partial class PxOrderSoapClient : System.ServiceModel.ClientBase<SD.Payex2.Services.PxOrder.PxOrderSoap>, SD.Payex2.Services.PxOrder.PxOrderSoap
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PxOrderSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(PxOrderSoapClient.GetBindingForEndpoint(endpointConfiguration), PxOrderSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PxOrderSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PxOrderSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PxOrderSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PxOrderSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PxOrderSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> Initialize8Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    long price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string additionalValues, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash)
        {
            return base.Channel.Initialize8Async(accountNumber, purchaseOperation, price, priceArgList, currency, vat, orderID, productNumber, description, clientIPAddress, clientIdentifier, additionalValues, externalID, returnUrl, view, agreementRef, cancelUrl, clientLanguage, hash);
        }
        
        public System.Threading.Tasks.Task<string> Initialize3Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    string orderType, 
                    int period, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string hash)
        {
            return base.Channel.Initialize3Async(accountNumber, purchaseOperation, orderType, period, price, priceArgList, vat, orderID, productNumber, description, clientIPAddress, externalID, returnUrl, view, viewType, hash);
        }
        
        public System.Threading.Tasks.Task<string> Initialize4Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash)
        {
            return base.Channel.Initialize4Async(accountNumber, purchaseOperation, price, priceArgList, currency, vat, orderID, productNumber, description, clientIPAddress, externalID, returnUrl, view, viewType, agreementRef, cancelUrl, hash);
        }
        
        public System.Threading.Tasks.Task<string> Initialize5Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string hash)
        {
            return base.Channel.Initialize5Async(accountNumber, purchaseOperation, price, priceArgList, currency, vat, orderID, productNumber, description, clientIPAddress, clientIdentifier, externalID, returnUrl, view, viewType, agreementRef, cancelUrl, hash);
        }
        
        public System.Threading.Tasks.Task<string> Initialize6Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    int viewType, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash)
        {
            return base.Channel.Initialize6Async(accountNumber, purchaseOperation, price, priceArgList, currency, vat, orderID, productNumber, description, clientIPAddress, clientIdentifier, externalID, returnUrl, view, viewType, agreementRef, cancelUrl, clientLanguage, hash);
        }
        
        public System.Threading.Tasks.Task<string> Initialize7Async(
                    long accountNumber, 
                    string purchaseOperation, 
                    int price, 
                    string priceArgList, 
                    string currency, 
                    int vat, 
                    string orderID, 
                    string productNumber, 
                    string description, 
                    string clientIPAddress, 
                    string clientIdentifier, 
                    string additionalValues, 
                    string externalID, 
                    string returnUrl, 
                    string view, 
                    string agreementRef, 
                    string cancelUrl, 
                    string clientLanguage, 
                    string hash)
        {
            return base.Channel.Initialize7Async(accountNumber, purchaseOperation, price, priceArgList, currency, vat, orderID, productNumber, description, clientIPAddress, clientIdentifier, additionalValues, externalID, returnUrl, view, agreementRef, cancelUrl, clientLanguage, hash);
        }
        
        public System.Threading.Tasks.Task<string> InitializeAsync(
                    long accountNumber, 
                    string orderType, 
                    string purchaseOperation, 
                    int autoRenew, 
                    string view, 
                    int period, 
                    string orderID, 
                    string productNumber, 
                    string subscriptionNumber, 
                    int price, 
                    string priceArgList, 
                    int vat, 
                    string description, 
                    string returnURL, 
                    int checkPeriod, 
                    string externalID, 
                    string hash)
        {
            return base.Channel.InitializeAsync(accountNumber, orderType, purchaseOperation, autoRenew, view, period, orderID, productNumber, subscriptionNumber, price, priceArgList, vat, description, returnURL, checkPeriod, externalID, hash);
        }
        
        public System.Threading.Tasks.Task<string> InitializeBasicAsync(long accountNumber, string purchaseOperation, string orderID, string productNumber, string priceArgList, string description, string returnURL, string hash)
        {
            return base.Channel.InitializeBasicAsync(accountNumber, purchaseOperation, orderID, productNumber, priceArgList, description, returnURL, hash);
        }
        
        public System.Threading.Tasks.Task<string> CompleteAsync(long accountNumber, string orderRef, string hash)
        {
            return base.Channel.CompleteAsync(accountNumber, orderRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> CheckTransactionAsync(long accountNumber, string OrderId, string hash)
        {
            return base.Channel.CheckTransactionAsync(accountNumber, OrderId, hash);
        }
        
        public System.Threading.Tasks.Task<string> Check2Async(long accountNumber, int transactionNumber, string hash)
        {
            return base.Channel.Check2Async(accountNumber, transactionNumber, hash);
        }
        
        public System.Threading.Tasks.Task<string> CheckAsync(long accountNumber, string transactionRef, string hash)
        {
            return base.Channel.CheckAsync(accountNumber, transactionRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> SalePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash)
        {
            return base.Channel.SalePXAsync(accountNumber, orderRef, userType, userRef, password, hash);
        }
        
        public System.Threading.Tasks.Task<string> AuthorizePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash)
        {
            return base.Channel.AuthorizePXAsync(accountNumber, orderRef, userType, userRef, password, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchasePXAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash)
        {
            return base.Channel.PurchasePXAsync(accountNumber, orderRef, userType, userRef, password, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseActivateAsync(long accountNumber, int transactionNumber, string hash)
        {
            return base.Channel.PurchaseActivateAsync(accountNumber, transactionNumber, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseOTTAsync(long accountNumber, string orderRef, int identifierType, string identifierRef, string hash)
        {
            return base.Channel.PurchaseOTTAsync(accountNumber, orderRef, identifierType, identifierRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseWyWalletAsync(long accountNumber, string orderRef, string msisdn, string hash)
        {
            return base.Channel.PurchaseWyWalletAsync(accountNumber, orderRef, msisdn, hash);
        }
        
        public System.Threading.Tasks.Task<string> PreparePurchaseWyWalletAsync(long accountNumber, string orderRef, string returnUrl, string hash)
        {
            return base.Channel.PreparePurchaseWyWalletAsync(accountNumber, orderRef, returnUrl, hash);
        }
        
        public System.Threading.Tasks.Task<string> PreparePurchaseSwishAsync(long accountNumber, string orderRef, string msisdn, string ipAddress, string hash)
        {
            return base.Channel.PreparePurchaseSwishAsync(accountNumber, orderRef, msisdn, ipAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> AuthenticateCpaAsync(long accountNumber, int authenticationType, string msisdn, string clientIPAddress, string moCode, string returnUrl, string hash)
        {
            return base.Channel.AuthenticateCpaAsync(accountNumber, authenticationType, msisdn, clientIPAddress, moCode, returnUrl, hash);
        }
        
        public System.Threading.Tasks.Task<string> SaleCPAAsync(long accountNumber, string orderRef, int userType, string userRef, string password, string hash)
        {
            return base.Channel.SaleCPAAsync(accountNumber, orderRef, userType, userRef, password, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseCpaAsync(long accountNumber, string orderRef, string msisdn, string verificationCode, string serviceCategory, string message, string hash)
        {
            return base.Channel.PurchaseCpaAsync(accountNumber, orderRef, msisdn, verificationCode, serviceCategory, message, hash);
        }
        
        public System.Threading.Tasks.Task<string> ReserveIVRAsync(long accountNumber, string orderRef, string hash)
        {
            return base.Channel.ReserveIVRAsync(accountNumber, orderRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> SaleIVRAsync(long accountNumber, string orderRef, int userType, string userRef, string ivrCode, string hash)
        {
            return base.Channel.SaleIVRAsync(accountNumber, orderRef, userType, userRef, ivrCode, hash);
        }
        
        public System.Threading.Tasks.Task<string> Cancel2Async(long accountNumber, int transactionNumber, string hash)
        {
            return base.Channel.Cancel2Async(accountNumber, transactionNumber, hash);
        }
        
        public System.Threading.Tasks.Task<string> CancelAsync(long accountNumber, string transactionRef, string hash)
        {
            return base.Channel.CancelAsync(accountNumber, transactionRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> Credit2Async(long accountNumber, int transactionNumber, int amount, string hash)
        {
            return base.Channel.Credit2Async(accountNumber, transactionNumber, amount, hash);
        }
        
        public System.Threading.Tasks.Task<string> Credit3Async(long accountNumber, int transactionNumber, int amount, string orderId, string hash)
        {
            return base.Channel.Credit3Async(accountNumber, transactionNumber, amount, orderId, hash);
        }
        
        public System.Threading.Tasks.Task<string> Credit4Async(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash)
        {
            return base.Channel.Credit4Async(accountNumber, transactionNumber, amount, orderId, vatAmount, additionalValues, hash);
        }
        
        public System.Threading.Tasks.Task<string> Credit5Async(long accountNumber, int transactionNumber, long amount, string orderId, int vatAmount, string additionalValues, string hash)
        {
            return base.Channel.Credit5Async(accountNumber, transactionNumber, amount, orderId, vatAmount, additionalValues, hash);
        }
        
        public System.Threading.Tasks.Task<string> CreditAsync(long accountNumber, string transactionRef, int amount, string hash)
        {
            return base.Channel.CreditAsync(accountNumber, transactionRef, amount, hash);
        }
        
        public System.Threading.Tasks.Task<string> CreditOrderLine2Async(long accountNumber, int transactionNumber, string itemNumber, string hash)
        {
            return base.Channel.CreditOrderLine2Async(accountNumber, transactionNumber, itemNumber, hash);
        }
        
        public System.Threading.Tasks.Task<string> CreditOrderLine3Async(long accountNumber, int transactionNumber, string itemNumber, string orderId, string hash)
        {
            return base.Channel.CreditOrderLine3Async(accountNumber, transactionNumber, itemNumber, orderId, hash);
        }
        
        public System.Threading.Tasks.Task<string> CreditOrderLineAsync(long accountNumber, string transactionRef, string itemNumber, string hash)
        {
            return base.Channel.CreditOrderLineAsync(accountNumber, transactionRef, itemNumber, hash);
        }
        
        public System.Threading.Tasks.Task<string> CaptureAsync(long accountNumber, string transactionRef, int amount, string hash)
        {
            return base.Channel.CaptureAsync(accountNumber, transactionRef, amount, hash);
        }
        
        public System.Threading.Tasks.Task<string> Capture2Async(long accountNumber, int transactionNumber, int amount, string hash)
        {
            return base.Channel.Capture2Async(accountNumber, transactionNumber, amount, hash);
        }
        
        public System.Threading.Tasks.Task<string> Capture3Async(long accountNumber, int transactionNumber, int amount, string orderId, string hash)
        {
            return base.Channel.Capture3Async(accountNumber, transactionNumber, amount, orderId, hash);
        }
        
        public System.Threading.Tasks.Task<string> Capture4Async(long accountNumber, int transactionNumber, int amount, string orderId, int vatAmount, string additionalValues, string hash)
        {
            return base.Channel.Capture4Async(accountNumber, transactionNumber, amount, orderId, vatAmount, additionalValues, hash);
        }
        
        public System.Threading.Tasks.Task<string> Capture5Async(long accountNumber, int transactionNumber, long amount, string orderId, int vatAmount, string additionalValues, string hash)
        {
            return base.Channel.Capture5Async(accountNumber, transactionNumber, amount, orderId, vatAmount, additionalValues, hash);
        }
        
        public System.Threading.Tasks.Task<string> SaleEVCAsync(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash)
        {
            return base.Channel.SaleEVCAsync(accountNumber, orderRef, userType, userRef, valueCode, clientIPAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> AuthorizeEVCAsync(long accountNumber, string orderRef, int userType, string userRef, string valueCode, string clientIPAddress, string hash)
        {
            return base.Channel.AuthorizeEVCAsync(accountNumber, orderRef, userType, userRef, valueCode, clientIPAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> AddSingleOrderLineAsync(long accountNumber, string orderRef, string itemNumber, string itemDescription1, string itemDescription2, string itemDescription3, string itemDescription4, string itemDescription5, int quantity, int amount, int vatPrice, int vatPercent, string hash)
        {
            return base.Channel.AddSingleOrderLineAsync(accountNumber, orderRef, itemNumber, itemDescription1, itemDescription2, itemDescription3, itemDescription4, itemDescription5, quantity, amount, vatPrice, vatPercent, hash);
        }
        
        public System.Threading.Tasks.Task<string> AddSingleOrderLine2Async(long accountNumber, string orderRef, string itemNumber, string itemDescription1, string itemDescription2, string itemDescription3, string itemDescription4, string itemDescription5, int quantity, long amount, int vatPrice, int vatPercent, string hash)
        {
            return base.Channel.AddSingleOrderLine2Async(accountNumber, orderRef, itemNumber, itemDescription1, itemDescription2, itemDescription3, itemDescription4, itemDescription5, quantity, amount, vatPrice, vatPercent, hash);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<SD.Payex2.Services.PxOrder.AddMultipleOrderLinesResponse> SD.Payex2.Services.PxOrder.PxOrderSoap.AddMultipleOrderLinesAsync(SD.Payex2.Services.PxOrder.AddMultipleOrderLinesRequest request)
        {
            return base.Channel.AddMultipleOrderLinesAsync(request);
        }
        
        public System.Threading.Tasks.Task<SD.Payex2.Services.PxOrder.AddMultipleOrderLinesResponse> AddMultipleOrderLinesAsync(long accountNumber, string orderRef, int numberOfItems, string[][] orderDetails, string hash)
        {
            SD.Payex2.Services.PxOrder.AddMultipleOrderLinesRequest inValue = new SD.Payex2.Services.PxOrder.AddMultipleOrderLinesRequest();
            inValue.accountNumber = accountNumber;
            inValue.orderRef = orderRef;
            inValue.numberOfItems = numberOfItems;
            inValue.orderDetails = orderDetails;
            inValue.hash = hash;
            return ((SD.Payex2.Services.PxOrder.PxOrderSoap)(this)).AddMultipleOrderLinesAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<string> PrepareSaleDDAsync(long accountNumber, string orderRef, int userType, string userRef, string bankName, string clientIPAddress, string clientIdentifier, string hash)
        {
            return base.Channel.PrepareSaleDDAsync(accountNumber, orderRef, userType, userRef, bankName, clientIPAddress, clientIdentifier, hash);
        }
        
        public System.Threading.Tasks.Task<string> PrepareSaleDD2Async(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash)
        {
            return base.Channel.PrepareSaleDD2Async(accountNumber, orderRef, userType, userRef, bankName, hash);
        }
        
        public System.Threading.Tasks.Task<string> PrepareAuthorizeDDAsync(long accountNumber, string orderRef, int userType, string userRef, string bankName, string hash)
        {
            return base.Channel.PrepareAuthorizeDDAsync(accountNumber, orderRef, userType, userRef, bankName, hash);
        }
        
        public System.Threading.Tasks.Task<string> SaleInvoiceAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string hash)
        {
            return base.Channel.SaleInvoiceAsync(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDateExceeded, hash);
        }
        
        public System.Threading.Tasks.Task<string> SaleInvoice2Async(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash)
        {
            return base.Channel.SaleInvoice2Async(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDateExceeded, creditcheckRef, invoiceLayout, hash);
        }
        
        public System.Threading.Tasks.Task<string> SaleInvoiceLedgerAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash)
        {
            return base.Channel.SaleInvoiceLedgerAsync(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDate, creditcheckRef, invoiceNumber, invoiceDate, hash);
        }
        
        public System.Threading.Tasks.Task<string> AddOrderAddressAsync(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash)
        {
            return base.Channel.AddOrderAddressAsync(accountNumber, orderRef, billingFirstName, billingLastName, billingAddress1, billingAddress2, billingAddress3, billingPostNumber, billingCity, billingState, billingCountry, billingEmail, billingPhone, billingGsm, deliveryFirstName, deliveryLastName, deliveryAddress1, deliveryAddress2, deliveryAddress3, deliveryPostNumber, deliveryCity, deliveryState, deliveryCountry, deliveryEmail, deliveryPhone, deliveryGsm, hash);
        }
        
        public System.Threading.Tasks.Task<string> AddOrderAddress2Async(
                    long accountNumber, 
                    string orderRef, 
                    string billingFirstName, 
                    string billingLastName, 
                    string billingAddress1, 
                    string billingAddress2, 
                    string billingAddress3, 
                    string billingPostNumber, 
                    string billingCity, 
                    string billingState, 
                    string billingCountry, 
                    string billingCountryCode, 
                    string billingEmail, 
                    string billingPhone, 
                    string billingGsm, 
                    string deliveryFirstName, 
                    string deliveryLastName, 
                    string deliveryAddress1, 
                    string deliveryAddress2, 
                    string deliveryAddress3, 
                    string deliveryPostNumber, 
                    string deliveryCity, 
                    string deliveryState, 
                    string deliveryCountry, 
                    string deliveryCountryCode, 
                    string deliveryEmail, 
                    string deliveryPhone, 
                    string deliveryGsm, 
                    string hash)
        {
            return base.Channel.AddOrderAddress2Async(accountNumber, orderRef, billingFirstName, billingLastName, billingAddress1, billingAddress2, billingAddress3, billingPostNumber, billingCity, billingState, billingCountry, billingCountryCode, billingEmail, billingPhone, billingGsm, deliveryFirstName, deliveryLastName, deliveryAddress1, deliveryAddress2, deliveryAddress3, deliveryPostNumber, deliveryCity, deliveryState, deliveryCountry, deliveryCountryCode, deliveryEmail, deliveryPhone, deliveryGsm, hash);
        }
        
        public System.Threading.Tasks.Task<string> AuthorizeGCAsync(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash)
        {
            return base.Channel.AuthorizeGCAsync(accountNumber, orderRef, userType, userRef, pan, expireMonth, expireYear, cvc, hash);
        }
        
        public System.Threading.Tasks.Task<string> SaleGCAsync(long accountNumber, string orderRef, int userType, string userRef, string pan, string expireMonth, string expireYear, string cvc, string hash)
        {
            return base.Channel.SaleGCAsync(accountNumber, orderRef, userType, userRef, pan, expireMonth, expireYear, cvc, hash);
        }
        
        public System.Threading.Tasks.Task<string> GetTransactionDetails2Async(long accountNumber, int transactionNumber, string hash)
        {
            return base.Channel.GetTransactionDetails2Async(accountNumber, transactionNumber, hash);
        }
        
        public System.Threading.Tasks.Task<string> GetTransactionDetailsAsync(long accountNumber, string transactionRef, string hash)
        {
            return base.Channel.GetTransactionDetailsAsync(accountNumber, transactionRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> TransactionCheck2Async(long accountNumber, int transactionNumber, string hash)
        {
            return base.Channel.TransactionCheck2Async(accountNumber, transactionNumber, hash);
        }
        
        public System.Threading.Tasks.Task<string> AuthorizeInvoiceAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDateExceeded, 
                    string creditcheckRef, 
                    string invoiceLayout, 
                    string hash)
        {
            return base.Channel.AuthorizeInvoiceAsync(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDateExceeded, creditcheckRef, invoiceLayout, hash);
        }
        
        public System.Threading.Tasks.Task<string> AuthorizeInvoiceLedgerAsync(
                    long accountNumber, 
                    string orderRef, 
                    int userType, 
                    string userRef, 
                    string invoiceText, 
                    int mediaDistribution, 
                    string customerId, 
                    string customerName, 
                    string customerPostNumber, 
                    string customerCity, 
                    string customerCountry, 
                    string customerSosialSecurityNumber, 
                    string customerPhoneNumber, 
                    string customerEmailAddress, 
                    string customerCOAddress, 
                    string customerStreetAddress, 
                    string productCode, 
                    string dueDate, 
                    string creditcheckRef, 
                    int invoiceNumber, 
                    string invoiceDate, 
                    string hash)
        {
            return base.Channel.AuthorizeInvoiceLedgerAsync(accountNumber, orderRef, userType, userRef, invoiceText, mediaDistribution, customerId, customerName, customerPostNumber, customerCity, customerCountry, customerSosialSecurityNumber, customerPhoneNumber, customerEmailAddress, customerCOAddress, customerStreetAddress, productCode, dueDate, creditcheckRef, invoiceNumber, invoiceDate, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseInvoicePrivateAsync(
                    long accountNumber, 
                    string orderRef, 
                    string customerRef, 
                    string customerName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string socialSecurityNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash)
        {
            return base.Channel.PurchaseInvoicePrivateAsync(accountNumber, orderRef, customerRef, customerName, streetAddress, coAddress, postalCode, city, country, socialSecurityNumber, phoneNumber, email, productCode, creditcheckRef, mediaDistribution, invoiceText, invoiceDate, invoiceDueDays, invoiceNumber, invoiceLayout, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseInvoiceCorporateAsync(
                    long accountNumber, 
                    string orderRef, 
                    string companyRef, 
                    string companyName, 
                    string streetAddress, 
                    string coAddress, 
                    string postalCode, 
                    string city, 
                    string country, 
                    string organizationNumber, 
                    string phoneNumber, 
                    string email, 
                    string productCode, 
                    string creditcheckRef, 
                    int mediaDistribution, 
                    string invoiceText, 
                    string invoiceDate, 
                    short invoiceDueDays, 
                    int invoiceNumber, 
                    string invoiceLayout, 
                    string hash)
        {
            return base.Channel.PurchaseInvoiceCorporateAsync(accountNumber, orderRef, companyRef, companyName, streetAddress, coAddress, postalCode, city, country, organizationNumber, phoneNumber, email, productCode, creditcheckRef, mediaDistribution, invoiceText, invoiceDate, invoiceDueDays, invoiceNumber, invoiceLayout, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseInvoiceSaleAsync(long accountNumber, string orderRef, string socialSecurityNumber, string legalFirstName, string legalLastName, string legalStreetAddress, string legalCoAddress, string legalPostNumber, string legalCity, string legalCountryCode, string email, string msisdn, string ipAddress, string hash)
        {
            return base.Channel.PurchaseInvoiceSaleAsync(accountNumber, orderRef, socialSecurityNumber, legalFirstName, legalLastName, legalStreetAddress, legalCoAddress, legalPostNumber, legalCity, legalCountryCode, email, msisdn, ipAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchasePartPaymentSaleAsync(long accountNumber, string orderRef, string socialSecurityNumber, string legalFirstName, string legalLastName, string legalStreetAddress, string legalCoAddress, string legalPostNumber, string legalCity, string legalCountryCode, string email, string msisdn, string ipAddress, string hash)
        {
            return base.Channel.PurchasePartPaymentSaleAsync(accountNumber, orderRef, socialSecurityNumber, legalFirstName, legalLastName, legalStreetAddress, legalCoAddress, legalPostNumber, legalCity, legalCountryCode, email, msisdn, ipAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> PreparePartPaymentSaleAsync(long accountNumber, string orderRef, string category, string socialSecurityNumber, string countryCode, string email, string msisdn, string ipAddress, string hash)
        {
            return base.Channel.PreparePartPaymentSaleAsync(accountNumber, orderRef, category, socialSecurityNumber, countryCode, email, msisdn, ipAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> GetAddressByPaymentMethodAsync(long accountNumber, string paymentMethod, string ssn, string zipcode, string countryCode, string ipAddress, string hash)
        {
            return base.Channel.GetAddressByPaymentMethodAsync(accountNumber, paymentMethod, ssn, zipcode, countryCode, ipAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> InvoiceLinkGetAsync(long accountNumber, int transactionNumber, string hash)
        {
            return base.Channel.InvoiceLinkGetAsync(accountNumber, transactionNumber, hash);
        }
        
        public System.Threading.Tasks.Task<string> GetLowestMonthlyPartPaymentAmountAsync(long accountNumber, long amount, string currency, string hash)
        {
            return base.Channel.GetLowestMonthlyPartPaymentAmountAsync(accountNumber, amount, currency, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseFinancingAsync(long accountNumber, string orderRef, string accountId, string socialSecurityNumber, string countryCode, string contractType, string hash)
        {
            return base.Channel.PurchaseFinancingAsync(accountNumber, orderRef, accountId, socialSecurityNumber, countryCode, contractType, hash);
        }
        
        public System.Threading.Tasks.Task<string> GetApprovedDeliveryAddressAsync(long accountNumber, string orderRef, string hash)
        {
            return base.Channel.GetApprovedDeliveryAddressAsync(accountNumber, orderRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> FinalizeTransactionAsync(long accountNumber, string orderRef, long amount, long vatAmount, string clientIPAddress, string hash)
        {
            return base.Channel.FinalizeTransactionAsync(accountNumber, orderRef, amount, vatAmount, clientIPAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseFinancingInvoiceAsync(long accountNumber, string orderRef, string socialSecurityNumber, string legalName, string streetAddress, string coAddress, string zipCode, string city, string countryCode, string paymentMethod, string email, string msisdn, string ipAddress, string hash)
        {
            return base.Channel.PurchaseFinancingInvoiceAsync(accountNumber, orderRef, socialSecurityNumber, legalName, streetAddress, coAddress, zipCode, city, countryCode, paymentMethod, email, msisdn, ipAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchaseCreditAccountAsync(long accountNumber, string orderRef, string socialSecurityNumber, string legalName, string streetAddress, string coAddress, string zipCode, string city, string countryCode, string paymentMethod, string email, string msisdn, string ipAddress, string hash)
        {
            return base.Channel.PurchaseCreditAccountAsync(accountNumber, orderRef, socialSecurityNumber, legalName, streetAddress, coAddress, zipCode, city, countryCode, paymentMethod, email, msisdn, ipAddress, hash);
        }
        
        public System.Threading.Tasks.Task<string> PreparePurchasePremiumSmsAsync(long accountNumber, string orderRef, string msisdn, string message, string hash)
        {
            return base.Channel.PreparePurchasePremiumSmsAsync(accountNumber, orderRef, msisdn, message, hash);
        }
        
        public System.Threading.Tasks.Task<string> AccomplishPremiumSmsAsync(long accountNumber, string orderRef, string hash)
        {
            return base.Channel.AccomplishPremiumSmsAsync(accountNumber, orderRef, hash);
        }
        
        public System.Threading.Tasks.Task<string> PurchasePremiumSmsAsync(long accountNumber, string orderRef, string msisdn, string message, string hash)
        {
            return base.Channel.PurchasePremiumSmsAsync(accountNumber, orderRef, msisdn, message, hash);
        }
        
        public System.Threading.Tasks.Task<string> CheckMsisdnAsync(long accountNumber, string msisdn, int amount, string vasAgreementId, string hash)
        {
            return base.Channel.CheckMsisdnAsync(accountNumber, msisdn, amount, vasAgreementId, hash);
        }
        
        public System.Threading.Tasks.Task<string> SendSmsCodeAsync(long accountNumber, string sender, string msIsdn, string customData, string vasAgreementId, string hash)
        {
            return base.Channel.SendSmsCodeAsync(accountNumber, sender, msIsdn, customData, vasAgreementId, hash);
        }
        
        public System.Threading.Tasks.Task<string> VerifySmsCodeStatusAsync(long accountNumber, string orderRef, string smsCode, string hash)
        {
            return base.Channel.VerifySmsCodeStatusAsync(accountNumber, orderRef, smsCode, hash);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.PxOrderSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.PxOrderSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.PxOrderSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://external.payex.com/pxorder/pxorder.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.PxOrderSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://external.payex.com/pxorder/pxorder.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            PxOrderSoap,
            
            PxOrderSoap12,
        }
    }
}
